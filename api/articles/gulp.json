{"title":"gulp前端构建工具","slug":"gulp","date":"2018-08-21T10:58:00.000Z","updated":"2018-11-26T03:41:30.023Z","comments":true,"excerpt":"","content":"<p><strong>*gulpjs是一个前端构建工具</strong>，与gruntjs相比，gulpjs无需写一大堆繁杂的配置参数，API也非常简单，学习起来很容易，而且gulpjs使用的是nodejs中stream来读取和操作数据，其速度更快。如果你还没有使用过前端构建工具，或者觉得gruntjs太难用的话，那就尝试一下gulp吧。*</p>\n<ul>\n<li>本文导航：</li>\n<li>gulp的安装</li>\n<li>开始使用gulp</li>\n<li>gulp的API介绍</li>\n<li>一些常用的gulp插件</li>\n</ul>\n<p><strong>1、gulp的安装</strong></p>\n<p>首先确保你已经正确安装了nodejs环境。然后以全局方式安装gulp：</p>\n<p>==npm install -g gulp==</p>\n<p>全局安装gulp后，还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后在命令行中执行：</p>\n<p>==npm install gulp==</p>\n<p>如果想在安装的时候把gulp写进项目package.json文件的依赖中，则可以加上–save-dev：</p>\n<p>==npm install –save-dev gulp==</p>\n<p>这样就完成了gulp的安装。至于为什么在全局安装gulp后，还需要在项目中本地安装一次，有兴趣的可以看下stackoverflow上有人做出的回答：why-do-we-need-to-install-gulp-globally-and-locally、what-is-the-point-of-double-install-in-gulp。大体就是为了版本的灵活性，但如果没理解那也不必太去纠结这个问题，只需要知道通常我们是要这样做就行了。</p>\n<p><strong>2、开始使用gulp</strong></p>\n<p>2.1 建立gulpfile.js文件</p>\n<p>就像gruntjs需要一个Gruntfile.js文件一样，gulp也需要一个文件作为它的主文件，在gulp中这个文件叫做gulpfile.js。新建一个文件名为gulpfile.js的文件，然后放到你的项目目录中。之后要做的事情就是在gulpfile.js文件中定义我们的任务了。下面是一个最简单的gulpfile.js文件内容示例，它定义了一个默认的任务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;);gulp.task(&apos;default&apos;,function()&#123;    console.log(&apos;hello world&apos;);&#125;);</span><br></pre></td></tr></table></figure>\n<p>此时我们的目录结构是这样子的：</p>\n<p>├── gulpfile.js</p>\n<p>├── node_modules</p>\n<p>│ └── gulp</p>\n<p>└── package.json</p>\n<p>2.2 运行gulp任务</p>\n<p>要运行gulp任务，只需切换到存放gulpfile.js文件的目录(windows平台请使用cmd或者Power Shell等工具)，然后在命令行中执行gulp命令就行了，gulp后面可以加上要执行的任务名，例如gulp task1，如果没有指定任务名，则会执行任务名为default的默认任务。</p>\n<p><strong>3、gulp的API介绍</strong></p>\n<p>使用gulp，仅需知道4个API即可：gulp.task(),gulp.src(),gulp.dest(),gulp.watch()，所以很容易就能掌握，但有几个地方需理解透彻才行，我会在下面一一说明。为了避免出现理解偏差，建议先看一遍官方文档。</p>\n<p>3.1 gulp.src()</p>\n<p>在介绍这个API之前我们首先来说一下Grunt.js和Gulp.js工作方式的一个区别。Grunt主要是以文件为媒介来运行它的工作流的，比如在Grunt中执行完一项任务后，会把结果写入到一个临时文件中，然后可以在这个临时文件内容的基础上执行其它任务，执行完成后又把结果写入到临时文件中，然后又以这个为基础继续执行其它任务…就这样反复下去。而在Gulp中，使用的是Nodejs中的stream(流)，首先获取到需要的stream，然后可以通过stream的pipe()方法把流导入到你想要的地方，比如Gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写入到文件中。所以Gulp是以stream为媒介的，它不需要频繁的生成临时文件，这也是Gulp的速度比Grunt快的一个原因。再回到正题上来，gulp.src()方法正是用来获取流的，但要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流(Vinyl files)，这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息，这个我们暂时不用去深入理解，你只需简单的理解可以用这个方法来读取你需要操作的文件就行了。其语法为：</p>\n<p>gulp.src(globs[, options])</p>\n<p>globs参数是文件匹配模式(类似正则表达式)，用来匹配文件路径(包括文件名)，当然这里也可以直接指定某个具体的文件路径。当有多个匹配模式时，该参数可以为一个数组。</p>\n<p>options为可选参数。通常情况下我们不需要用到。</p>\n<p>下面我们重点说说Gulp用到的glob的匹配规则以及一些文件匹配技巧。</p>\n<p>Gulp内部使用了node-glob模块来实现其文件匹配功能。我们可以使用下面这些特殊的字符来匹配我们想要的文件：</p>\n<ul>\n<li>匹配文件路径中的0个或多个字符，但不会匹配路径分隔符，除非路径分隔符出现在末尾<br>*<em> 匹配路径中的0个或多个目录及其子目录,需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。<br>? 匹配文件路径中的一个字符(不会匹配路径分隔符)<br>[…] 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为^或!时，则表示不匹配方括号中出现的其他字符中的任意一个，类似js正则表达式中的用法<br>!(pattern|pattern|pattern) 匹配任何与括号中给定的任一模式都不匹配的<br>?(pattern|pattern|pattern) 匹配括号中给定的任一模式0次或1次，类似于js正则中的(pattern|pattern|pattern)?<br>+(pattern|pattern|pattern) 匹配括号中给定的任一模式至少1次，类似于js正则中的(pattern|pattern|pattern)+\n</em>(pattern|pattern|pattern) 匹配括号中给定的任一模式0次或多次，类似于js正则中的(pattern|pattern|pattern)*<br>@(pattern|pattern|pattern) 匹配括号中给定的任一模式1次，类似于js正则中的(pattern|pattern|pattern)<br>下面以一系列例子来加深理解</li>\n<li>能匹配 a.js,x.y,abc,abc/,但不能匹配a/b.js<br><em>.</em> 能匹配 a.js,style.css,a.b,x.y<br><em>/</em>/<em>.js 能匹配 a/b/c.js,x/y/z.js,不能匹配a/b.js,a/b/c/d.js<br><strong> 能匹配 abc,a/b.js,a/b/c.js,x/y/z,x/y/z/a.b,能用来匹配所有的目录和文件\n</strong>/</em>.js 能匹配 foo.js,a/foo.js,a/b/foo.js,a/b/c/foo.js<br>a/<strong>/z 能匹配 a/z,a/b/z,a/b/c/z,a/d/g/h/j/k/z<br>a/</strong>b/z 能匹配 a/b/z,a/sb/z,但不能匹配a/x/sb/z,因为只有单**单独出现才能匹配多级目录<br>?.js 能匹配 a.js,b.js,c.js<br>a?? 能匹配 a.b,abc,但不能匹配ab/,因为它不会匹配路径分隔符<br>[xyz].js 只能匹配 x.js,y.js,z.js,不会匹配xy.js,xyz.js等,整个中括号只代表一个字符<br>[^xyz].js 能匹配 a.js,b.js,c.js等,不能匹配x.js,y.js,z.js<br>当有多种匹配模式时可以使用数组</li>\n</ul>\n<p>//使用数组的方式来匹配多种文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src([&apos;js/*.js&apos;,&apos;css/*.css&apos;,&apos;*.html&apos;])</span><br></pre></td></tr></table></figure>\n<p>使用数组的方式还有一个好处就是可以很方便的使用排除模式，在数组中的单个匹配模式前加上!即是排除模式，它会在匹配的结果中排除这个匹配，要注意一点的是不能在数组中的第一个元素中使用排除模式</p>\n<p>gulp.src([<em>.js,’!b</em>.js’]) //匹配所有js文件，但排除掉以b开头的js文件gulp.src([‘!b<em>.js’,</em>.js]) //不会排除任何文件，因为排除模式不能出现在数组的第一个元素中</p>\n<p>此外，还可以使用展开模式。展开模式以花括号作为定界符，根据它里面的内容，会展开为多个模式，最后匹配的结果为所有展开的模式相加起来得到的结果。展开的例子如下：<br>a{b,c}d 会展开为 abd,acd<br>a{b,}c 会展开为 abc,ac<br>a{0..3}d 会展开为 a0d,a1d,a2d,a3d<br>a{b,c{d,e}f}g 会展开为 abg,acdfg,acefg<br>a{b,c}d{e,f}g 会展开为 abdeg,acdeg,abdeg,abdfg<br>3.2 gulp.dest()</p>\n<p>gulp.dest()方法是用来写文件的，其语法为：</p>\n<p>gulp.dest(path[,options])</p>\n<p>path为写入文件的路径</p>\n<p>options为一个可选的参数对象，通常我们不需要用到</p>\n<p>要想使用好gulp.dest()这个方法，就要理解给它传入的路径参数与最终生成的文件的关系。</p>\n<p>gulp的使用流程一般是这样子的：首先通过gulp.src()方法获取到我们想要处理的文件流，然后把文件流通过pipe方法导入到gulp的插件中，最后把经过插件处理后的流再通过pipe方法导入到gulp.dest()中，gulp.dest()方法则把流中的内容写入到文件中，这里首先需要弄清楚的一点是，我们给gulp.dest()传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，所以生成的文件名是由导入到它的文件流决定的，即使我们给它传入一个带有文件名的路径参数，然后它也会把这个文件名当做是目录名，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;);gulp.src(&apos;script/jquery.js&apos;)    .pipe(gulp.dest(&apos;dist/foo.js&apos;));</span><br></pre></td></tr></table></figure>\n<p>//最终生成的文件路径为 dist/foo.js/jquery.js,而不是dist/foo.js</p>\n<p>要想改变文件名，可以使用插件gulp-rename</p>\n<p>下面说说生成的文件路径与我们给gulp.dest()方法传入的路径参数之间的关系。</p>\n<p>gulp.dest(path)生成的文件路径是我们传入的path参数后面再加上gulp.src()中有通配符开始出现的那部分路径。例如：</p>\n<p>var gulp = reruire(‘gulp’);//有通配符开始出现的那部分路径为 <strong>/*.jsgulp.src(‘script/</strong>/<em>.js’)    .pipe(gulp.dest(‘dist’)); //最后生成的文件路径为 dist/**/</em>.js//如果 *<em>/</em>.js 匹配到的文件为 jquery/jquery.js ,则生成的文件路径为 dist/jquery/jquery.js</p>\n<p>再举更多一点的例子</p>\n<p>gulp.src(‘script/avalon/avalon.js’) //没有通配符出现的情况.pipe(gulp.dest(‘dist’)); //最后生成的文件路径为 dist/avalon.js//有通配符开始出现的那部分路径为 <strong>/underscore.jsgulp.src(‘script/</strong>/underscore.js’)    //假设匹配到的文件为script/util/underscore.js.pipe(gulp.dest(‘dist’)); //则最后生成的文件路径为 dist/util/underscore.jsgulp.src(‘script/<em>‘) //有通配符出现的那部分路径为 </em>//假设匹配到的文件为script/zepto.js    .pipe(gulp.dest(‘dist’)); //则最后生成的文件路径为 dist/zepto.js</p>\n<p>通过指定gulp.src()方法配置参数中的base属性，我们可以更灵活的来改变gulp.dest()生成的文件路径。</p>\n<p>当我们没有在gulp.src()方法中配置base属性时，base的默认值为通配符开始出现之前那部分路径，例如：</p>\n<p>gulp.src(‘app/src/*<em>/</em>.css’) //此时base的值为 app/src</p>\n<p>上面我们说的gulp.dest()所生成的文件路径的规则，其实也可以理解成，用我们给gulp.dest()传入的路径替换掉gulp.src()中的base路径，最终得到生成文件的路径。</p>\n<p>gulp.src(‘app/src/*<em>/</em>.css’) //此时base的值为app/src,也就是说它的base路径为app/src//设该模式匹配到了文件 app/src/css/normal.css.pipe(gulp.dest(‘dist’)) //用dist替换掉base路径，最终得到 dist/css/normal.css</p>\n<p>所以改变base路径后，gulp.dest()生成的文件路径也会改变</p>\n<p>gulp.src(script/lib/<em>.js) //没有配置base参数，此时默认的base路径为script/lib//假设匹配到的文件为script/lib/jquery.js    .pipe(gulp.dest(‘build’)) //生成的文件路径为 build/jquery.jsgulp.src(script/lib/</em>.js, {base:’script’}) //配置了base参数，此时base路径为script//假设匹配到的文件为script/lib/jquery.js    .pipe(gulp.dest(‘build’)) //此时生成的文件路径为 build/lib/jquery.js    </p>\n<p>用gulp.dest()把文件流写入文件后，文件流仍然可以继续使用。</p>\n<p>3.3 gulp.task()</p>\n<p>gulp.task方法用来定义任务，内部使用的是Orchestrator，其语法为：</p>\n<p>gulp.task(name[, deps], fn)</p>\n<p>name 为任务名</p>\n<p>deps 是当前定义的任务需要依赖的其他任务，为一个数组。当前定义的任务会在所有依赖的任务执行完毕后才开始执行。如果没有依赖，则可省略这个参数</p>\n<p>fn 为任务函数，我们把任务要执行的代码都写在里面。该参数也是可选的。</p>\n<p>gulp.task(‘mytask’, [‘array’, ‘of’, ‘task’, ‘names’], function() { //定义一个有依赖的任务// Do something});</p>\n<p>gulp.task()这个API没什么好讲的，但需要知道执行多个任务时怎么来控制任务执行的顺序。</p>\n<p>gulp中执行多个任务，可以通过任务依赖来实现。例如我想要执行one,two,three这三个任务，那我们就可以定义一个空的任务，然后把那三个任务当做这个空的任务的依赖就行了：</p>\n<p>//只要执行default任务，就相当于把one,two,three这三个任务执行了gulp.task(‘default’,[‘one’,’two’,’three’]);</p>\n<p>如果任务相互之间没有依赖，任务会按你书写的顺序来执行，如果有依赖的话则会先执行依赖的任务。</p>\n<p>但是如果某个任务所依赖的任务是异步的，就要注意了，gulp并不会等待那个所依赖的异步任务完成，而是会接着执行后续的任务。例如：</p>\n<p>gulp.task(‘one’,function(){  //one是一个异步执行的任务  setTimeout(function(){    console.log(‘one is done’)  },5000);});//two任务虽然依赖于one任务,但并不会等到one任务中的异步操作完成后再执行gulp.task(‘two’,[‘one’],function(){  console.log(‘two is done’);});</p>\n<p>上面的例子中我们执行two任务时，会先执行one任务，但不会去等待one任务中的异步操作完成后再执行two任务，而是紧接着执行two任务。所以two任务会在one任务中的异步操作完成之前就执行了。</p>\n<p>那如果我们想等待异步任务中的异步操作完成后再执行后续的任务，该怎么做呢？</p>\n<p>有三种方法可以实现：</p>\n<p>第一：在异步操作完成后执行一个回调函数来通知gulp这个异步任务已经完成,这个回调函数就是任务函数的第一个参数。</p>\n<p>gulp.task(‘one’,function(cb){ //cb为任务函数提供的回调，用来通知任务已经完成//one是一个异步执行的任务  setTimeout(function(){    console.log(‘one is done’);    cb();  //执行回调，表示这个异步任务已经完成  },5000);});//这时two任务会在one任务中的异步操作完成后再执行gulp.task(‘two’,[‘one’],function(){  console.log(‘two is done’);});</p>\n<p>第二：定义任务时返回一个流对象。适用于任务就是操作gulp.src获取到的流的情况。</p>\n<p>gulp.task(‘one’,function(cb){  var stream = gulp.src(‘client/*<em>/</em>.js’)      .pipe(dosomething()) //dosomething()中有某些异步操作      .pipe(gulp.dest(‘build’));    return stream;});gulp.task(‘two’,[‘one’],function(){  console.log(‘two is done’);});</p>\n<p>第三：返回一个promise对象，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Q = require(&apos;q&apos;); //一个著名的异步处理的库 https://github.com/kriskowal/qgulp.task(&apos;one&apos;,function(cb)&#123;  var deferred = Q.defer();  // 做一些异步操作  setTimeout(function() &#123;     deferred.resolve();  &#125;, 5000);  return deferred.promise;&#125;);gulp.task(&apos;two&apos;,[&apos;one&apos;],function()&#123;  console.log(&apos;two is done&apos;);&#125;);</span><br></pre></td></tr></table></figure>\n<p>gulp.task()就这些了，主要是要知道当依赖是异步任务时的处理。</p>\n<p>3.4 gulp.watch()</p>\n<p>gulp.watch()用来监视文件的变化，当文件发生变化后，我们可以利用它来执行相应的任务，例如文件压缩等。其语法为</p>\n<p>gulp.watch(glob[, opts], tasks)</p>\n<p>glob 为要监视的文件匹配模式，规则和用法与gulp.src()方法中的glob相同。</p>\n<p>opts 为一个可选的配置对象，通常不需要用到</p>\n<p>tasks 为文件变化后要执行的任务，为一个数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(&apos;uglify&apos;,function()&#123;  //do something&#125;);gulp.task(&apos;reload&apos;,function()&#123;  //do something&#125;);gulp.watch(&apos;js/**/*.js&apos;, [&apos;uglify&apos;,&apos;reload&apos;]);</span><br></pre></td></tr></table></figure>\n<p>gulp.watch()还有另外一种使用方式：</p>\n<p>gulp.watch(glob[, opts, cb])</p>\n<p>glob和opts参数与第一种用法相同</p>\n<p>cb参数为一个函数。每当监视的文件发生变化时，就会调用这个函数,并且会给它传入一个对象，该对象包含了文件变化的一些信息，type属性为变化的类型，可以是added,changed,deleted；path属性为发生变化的文件的路径</p>\n<p>gulp.watch(‘js/*<em>/</em>.js’, function(event){    console.log(event.type); //变化类型 added为新增,deleted为删除，changed为改变 console.log(event.path); //变化的文件的路径}); </p>\n<p>4、一些常用的gulp插件</p>\n<p>gulp的插件数量虽然没有grunt那么多，但也可以说是应有尽有了，下面列举一些常用的插件。</p>\n<p>4.1 自动加载插件</p>\n<p>使用gulp-load-plugins</p>\n<p>安装：npm install –save-dev gulp-load-plugins</p>\n<p>要使用gulp的插件，首先得用require来把插件加载进来，如果我们要使用的插件非常多，那我们的gulpfile.js文件开头可能就会是这个样子的：</p>\n<p>var gulp = require(‘gulp’),    //一些gulp插件,abcd这些命名只是用来举个例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = require(&apos;gulp-a&apos;),     b = require(&apos;gulp-b&apos;),    c = require(&apos;gulp-c&apos;),    d = require(&apos;gulp-d&apos;),    e = require(&apos;gulp-e&apos;),    f = require(&apos;gulp-f&apos;),    g = require(&apos;gulp-g&apos;),    //更多的插件...    z = require(&apos;gulp-z&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>虽然这没什么问题，但会使我们的gulpfile.js文件变得很冗长，看上去不那么舒服。gulp-load-plugins插件正是用来解决这个问题。</p>\n<p>gulp-load-plugins这个插件能自动帮你加载package.json文件里的gulp插件。例如假设你的package.json文件里的依赖是这样的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  &quot;devDependencies&quot;: &#123;    &quot;gulp&quot;: &quot;~3.6.0&quot;,    &quot;gulp-rename&quot;: &quot;~1.2.0&quot;,    &quot;gulp-ruby-sass&quot;: &quot;~0.4.3&quot;,    &quot;gulp-load-plugins&quot;: &quot;~0.5.1&quot;  &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们可以在gulpfile.js中使用gulp-load-plugins来帮我们加载插件：</p>\n<p>var gulp = require(‘gulp’);//加载gulp-load-plugins插件，并马上运行它var plugins = require(‘gulp-load-plugins’)();</p>\n<p>然后我们要使用gulp-rename和gulp-ruby-sass这两个插件的时候，就可以使用plugins.rename和plugins.rubySass来代替了,也就是原始插件名去掉gulp-前缀，之后再转换为驼峰命名。</p>\n<p>实质上gulp-load-plugins是为我们做了如下的转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins.rename = require(&apos;gulp-rename&apos;);plugins.rubySass = require(&apos;gulp-ruby-sass&apos;);</span><br></pre></td></tr></table></figure>\n<p>gulp-load-plugins并不会一开始就加载所有package.json里的gulp插件，而是在我们需要用到某个插件的时候，才去加载那个插件。</p>\n<p>最后要提醒的一点是，因为gulp-load-plugins是通过你的package.json文件来加载插件的，所以必须要保证你需要自动加载的插件已经写入到了package.json文件里，并且这些插件都是已经安装好了的。</p>\n<p>4.2 重命名</p>\n<p>使用gulp-rename</p>\n<p>安装：==npm install –save-dev gulp-rename==</p>\n<p>用来重命名文件流中的文件。用gulp.dest()方法写入文件时，文件名使用的是文件流中的文件名，如果要想改变文件名，那可以在之前用gulp-rename插件来改变文件流中的文件名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;),    rename = require(&apos;gulp-rename&apos;),    uglify = require(&quot;gulp-uglify&quot;); gulp.task(&apos;rename&apos;, function() &#123;    gulp.src(&apos;js/jquery.js&apos;)    .pipe(uglify())  //压缩    .pipe(rename(&apos;jquery.min.js&apos;)) //会将jquery.js重命名为jquery.min.js    .pipe(gulp.dest(&apos;js&apos;));    //关于gulp-rename的更多强大的用法请参考https://www.npmjs.com/package/gulp-rename&#125;);</span><br></pre></td></tr></table></figure>\n<p>4.3 js文件压缩</p>\n<p>使用gulp-uglify</p>\n<p>安装：npm install –save-dev gulp-uglify</p>\n<p>用来压缩js文件，使用的是uglify引擎</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;),    uglify = require(&quot;gulp-uglify&quot;); gulp.task(&apos;minify-js&apos;, function () &#123;    gulp.src(&apos;js/*.js&apos;) // 要压缩的js文件    .pipe(uglify())  //使用uglify进行压缩,更多配置请参考：    .pipe(gulp.dest(&apos;dist/js&apos;)); //压缩后的路径&#125;);</span><br></pre></td></tr></table></figure>\n<p>4.4 css文件压缩</p>\n<p>使用gulp-minify-css</p>\n<p>安装：npm install –save-dev gulp-minify-css</p>\n<p>要压缩css文件时可以使用该插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;),    minifyCss = require(&quot;gulp-minify-css&quot;); gulp.task(&apos;minify-css&apos;, function () &#123;    gulp.src(&apos;css/*.css&apos;) // 要压缩的css文件    .pipe(minifyCss()) //压缩css    .pipe(gulp.dest(&apos;dist/css&apos;));&#125;);</span><br></pre></td></tr></table></figure>\n<p>4.5 html文件压缩</p>\n<p>使用gulp-minify-html</p>\n<p>安装：npm install –save-dev gulp-minify-html</p>\n<p>用来压缩html文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;),    minifyHtml = require(&quot;gulp-minify-html&quot;); gulp.task(&apos;minify-html&apos;, function () &#123;    gulp.src(&apos;html/*.html&apos;) // 要压缩的html文件    .pipe(minifyHtml()) //压缩    .pipe(gulp.dest(&apos;dist/html&apos;));&#125;);</span><br></pre></td></tr></table></figure>\n<p>4.6 js代码检查</p>\n<p>使用gulp-jshint</p>\n<p>==安装：npm install –save-dev gulp-jshint==</p>\n<p>用来检查js代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;),    jshint = require(&quot;gulp-jshint&quot;); gulp.task(&apos;jsLint&apos;, function () &#123;    gulp.src(&apos;js/*.js&apos;)    .pipe(jshint())    .pipe(jshint.reporter()); // 输出检查结果&#125;);</span><br></pre></td></tr></table></figure>\n<p>4.7 文件合并</p>\n<p>使用gulp-concat</p>\n<p>==安装：npm install –save-dev gulp-concat==</p>\n<p>用来把多个文件合并为一个文件,我们可以用它来合并js或css文件等，这样就能减少页面的http请求数了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;),    concat = require(&quot;gulp-concat&quot;); gulp.task(&apos;concat&apos;, function () &#123;    gulp.src(&apos;js/*.js&apos;)  //要合并的文件    .pipe(concat(&apos;all.js&apos;))  // 合并匹配到的js文件并命名为 &quot;all.js&quot;    .pipe(gulp.dest(&apos;dist/js&apos;));&#125;);</span><br></pre></td></tr></table></figure>\n<p>4.8 less和sass的编译</p>\n<p>less使用gulp-less,==安装：npm install –save-dev gulp-less==</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;),    less = require(&quot;gulp-less&quot;); gulp.task(&apos;compile-less&apos;, function () &#123;    gulp.src(&apos;less/*.less&apos;)    .pipe(less())    .pipe(gulp.dest(&apos;dist/css&apos;));&#125;);</span><br></pre></td></tr></table></figure>\n<p>sass使用gulp-sass,==安装：npm install –save-dev gulp-sass==</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;),    sass = require(&quot;gulp-sass&quot;); gulp.task(&apos;compile-sass&apos;, function () &#123;    gulp.src(&apos;sass/*.sass&apos;)    .pipe(sass())    .pipe(gulp.dest(&apos;dist/css&apos;));&#125;);</span><br></pre></td></tr></table></figure>\n<p>4.9 图片压缩</p>\n<p>可以使用gulp-imagemin插件来压缩jpg、png、gif等图片。</p>\n<p>安装：==npm install –save-dev gulp-imagemin==</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;);var imagemin = require(&apos;gulp-imagemin&apos;);var pngquant = require(&apos;imagemin-pngquant&apos;); //png图片压缩插件gulp.task(&apos;default&apos;, function () &#123;    return gulp.src(&apos;src/images/*&apos;)        .pipe(imagemin(&#123;            progressive: true,            use: [pngquant()] //使用pngquant来压缩png图片        &#125;))        .pipe(gulp.dest(&apos;dist&apos;));&#125;);</span><br></pre></td></tr></table></figure>\n<p>gulp-imagemin的使用比较复杂一点，而且它本身也有很多插件，建议去它的项目主页看看文档</p>\n<p>4.10 自动刷新</p>\n<p>使用gulp-livereload插件，==安装:npm install –save-dev gulp-livereload。==</p>\n<p>当代码变化时，它可以帮我们自动刷新页面</p>\n<p>该插件最好配合谷歌浏览器来使用，且要安装livereload chrome extension扩展插件,不能下载的请自行FQ。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;),    less = require(&apos;gulp-less&apos;),    livereload = require(&apos;gulp-livereload&apos;);gulp.task(&apos;less&apos;, function() &#123;  gulp.src(&apos;less/*.less&apos;)    .pipe(less())    .pipe(gulp.dest(&apos;css&apos;))    .pipe(livereload());&#125;);gulp.task(&apos;watch&apos;, function() &#123;  livereload.listen(); //要在这里调用listen()方法  gulp.watch(&apos;less/*.less&apos;, [&apos;less&apos;]);&#125;);</span><br></pre></td></tr></table></figure>\n<p>如对gulp还有什么不明白之处，或者本文有什么遗漏或错误，欢迎一起交流和探讨~</p>\n","categories":[],"tags":[{"name":"学习","path":"api/tags/学习.json"}]}