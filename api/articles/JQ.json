{"title":"JQ笔记","slug":"JQ","date":"2017-01-03T00:58:00.000Z","updated":"2018-12-02T15:32:42.254Z","comments":true,"excerpt":"","content":"<pre>\n                JQ英文文档：https://api.jquery.com/\n                JQ中文文档：http://jquery.cuishifeng.cn/\n                \n                防止文档在完全加载（就绪）之前运行 jQuery 代码\n                $(document).ready(function(){\n                \n                });\n                简洁写法（与以上写法效果相同）:\n                $(function(){\n                \n                });\n                \n                #id 选择器                $(\"#test\")\n                .class 选择器             $(\".test\")\n                $(this)\t\t选取当前 HTML 元素\n                $(\"p.intro\")\t选取 class 为 intro 的 <p> 元素\n                $(\"p:first\")\t\t选取第一个 </p><p> 元素\n                $(\"ul li:first\")\t选取第一个 <ul> 元素的第一个 <li> 元素\n                $(\"ul li:first-child\")\t选取每个 <ul> 元素的第一个 <li> 元素\n                $(\"[href]\")\t\t选取带有 href 属性的元素\n                $(\"a[target='_blank']\")选取所有 target 属性值等于 \"_blank\" 的 <a> 元素\n                $(\":button\")\t选取所有 type=\"button\" 的 <input> 元素 和 <button> 元素\n                $(\"tr:even\")\t选取偶数位置的 <tr> 元素\n                $(\"tr:odd\")\t\t选取奇数位置的 </tr><tr> 元素\n                $(\"A B\") 查找A元素下面的所有子节点，包括非直接子节点\n                $(\"A>B\") 查找A元素下面的直接子节点\n                $(\"A+B\") 查找A元素后面的兄弟节点，包括非直接子节点\n                $(\"A~B\") 查找A元素后面的兄弟节点，不包括非直接子节点\n                \n                * $(selector).toggle(speed,callback);  【显示/隐藏】\n                1.$(selector)选中的元素的个数为n个，则callback函数会执行n次\n                2.callback函数名后加括号，会立刻执行函数体，而不是等到显示/隐藏完成后才执行(封装后调用)\n                3.callback既可以是函数名，也可以是匿名函数\n                \n                fadeIn(k) 用于淡入已隐藏的元素\n                fadeOut() 方法用于淡出可见元素\n                * fadeToggle(speed,callbac) 方法 【淡入/淡出】\n                \n                * $(selector).fadeTo(speed,opacity,callback); 允许渐变为给定的不透明度（值介于 0 与 1 之间）\n                \n                slideDown() 方法用于向下滑动元素\n                slideUp() 方法用于向上滑动元素\n                * slideToggle(speed,callback) 【上下滑动切换】\n                \n                * $(selector).animate({params},speed,callback); 【动画】\n                【注意】使用前需要将元素的 position 属性设置为 relative, fixed, 或 absolute!\n                【注意2】必须使用 paddingLeft 而不是 padding-left，使用 marginRight 而不是 margin-right，等等。\n                同时，色彩动画并不包含在核心 jQuery 库中。（使用色彩需要下载插件）\n                【定义相对值】需要在值的前面加上 += 或 -= 如width:'+=150px';\n                【 预定义的值】属性的动画值设置为 \"show\"、\"hide\" 或 \"toggle\"\n                【队列功能】\n                $(\"button\").click(function(){\n                  var div=$(\"div\");\n                  div.animate({left:'100px'},\"slow\");\n                  div.animate({fontSize:'3em'},\"slow\");\n                }); \n                必需的 params 参数定义形成动画的 CSS 属性。\n                可选的 speed 参数规定效果的时长。它可以取以下值：\"slow\"、\"fast\" 或毫秒。\n                可选的 callback 参数是动画完成后所执行的函数名称。\n                \n                stop() 方法用于停止动画或效果，在它们完成之前\n                stop() 方法适用于所有 jQuery 效果函数，包括滑动、淡入淡出和自定义动画\n                 $(selector).stop(stopAll,goToEnd);\n                可选的 stopAll 参数规定是否应该清除动画队列。默认是 false。即仅停止活动的动画，允许任何排入队列的动画向后执行。\n                可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。\n                \n                Chaining 允许我们在一条语句中运行多个 jQuery 方法（在相同的元素上）\n                $(\"#p1\").css(\"color\",\"red\").slideUp(2000).slideDown(2000);\n                \n                【获取值】\n                text() - 设置或返回所选元素的文本内容\n                html() - 设置或返回所选元素的内容（包括 HTML 标记）\n                val() - 设置或返回表单字段的值\n                attr() 方法用于获取属性值。如attr('href')获取为链接www.baidu.com\n                prop(\"checked\")/prop(\"checked\",true/false)：获取或设置返回值为boolean的属性\n                【设置值】\n                方法一：text('hello world'）\n                方法二（回调函数）：\n                text(function(i,origText){\n                      return  '旧文本'+origText+'新文本'+i+''; \n                    });\n                i:被选元素列表中当前元素的下标\n                origText:原始（旧的）值\n                \n                方法一：attr('href','//www.sougou.com'）\n                方法二（设置多属性）：\n                attr({\n                    \"href\" : \"//www.baidu.cn/jquery\", \n                    \"title\" : \"jQuery 教程\" \n                  })\n                方法三（回调函数）：\n                attr(\"href\", function(i,origValue){ \n                    return origValue + \"/jquery\"; \n                  }); \n                \n                【添加元素】\n                append() - 在被选元素内部的结尾插入指定内容 <p>文本【插入】</p>\n                prepend() - 在被选元素内部的开头插入指定内容\n                after() - 在被选元素之后插入内容<p>文本</p>【插入】\n                before() - 在被选元素之前插入内容\n                \n                【删除元素】\n                remove() - 删除被选元素（及其子元素）\n                remove(\"#a\") 方法也可接受一个参数，只删除id为a的\n                empty() - 从被选元素中删除子元素 被选中父元素的不会删除\n                \n                【操作CSS】\n                addClass() - 向被选元素添加一个或多个类\n                removeClass() - 从被选元素删除一个或多个类\n                *toggleClass() - 对被选元素进行添加/删除类的切换操作\n                *css(\"background\") - 获取样式属性\n                【设置】：$(\"p\").css(\"background-color\",\"red\");\n                【做判断时】:if($('div').css('display')=='none')\n                【设置多个 CSS 属性】:\n                css({\n                'display':'none'\n                })\n                \n                \n                【尺寸】\n                width() / height()  元素宽高\n                innerWidth() 元素宽+padding\n                outerWidth() 元素宽+padding+border\n                outerWidth(true) 元素宽+padding+border+margin\n                \n                \n                【遍历】\n                (祖先)\n                *parent() 方法返回被选元素的直接父元素\n                *parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<html>)\n                        例子：parents('ul') 可选参数来过滤对祖先元素的搜索 只搜索带'ul'的父级元素\n                *parentsUntil() 方法返回介于两个给定元素之间的所有祖先元素。\n                        例子：$('div').parentsUntil('ul')  返回 div到ul之间的元素 不包括div和ul\n                \n                （后代）\n                children() 方法返回被选元素的所有直接子元素\n                        过滤搜索 $(\"div\").children(\"p.class/#id\");\n                find() 方法返回被选元素的后代元素，一路向下直到最后一个后代。\n                        例子：$('div').find('span') 找出div后代所有span\n                        例子： $(\"div\").find(\"*\"); 返回 <div> 的所有后代\n                \n                （同胞）\n                siblings() 方法返回被选元素的所有同胞元素\n                next() 方法返回被选元素的下一个同胞元素\n                         $(\"h2\").next(); 返回H2的下一个同胞\n                nextAll() 方法返回被选元素的所有跟随的同胞元素\n                         $(\"h2\").next(); 返回H2下面的所有同胞\n                nextUntil() 方法返回介于两个给定参数之间的所有跟随的同胞元素。\n                prev() 上一个同胞\n                 prevAll() 上面的全部同胞\n                prevUntil() \n                \n                （过滤）\n                first() 方法返回被选元素的首个元素。\n                last() 方法返回被选元素的最后一个元素。\n                eq() 方法返回被选元素中带有指定索引号的元素。\n                        例子：$(\"p\").eq(1); 选取第二个 <p> 元素\n                :gt(no)\t\t$(\"ul li:gt(3)\")\t列举 index 大于 3 的元素\n                :lt(no)\t\t$(\"ul li:lt(3)\")\t列举 index 小于 3 的元素\n                :header\t\t$(\":header\")\t所有标题元素 </p><h1>, <h2>\n                :contains(text)\t$(\":contains('Hello')\")\t所有包含文本 \"Hello\" 的元素\n                :has(selector)\t$(\"div:has(p)\")\t所有包含有 <p> 元素在其内的 <div> 元素\n                \n                filter() 方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回\n                        例子：$(\"p\").filter(\".a\"); 返回带a的class的元素\n                not() 方法返回不匹配标准的所有元素。（和上面相反）\n                \n                【ajax】\n                $(selector).load(URL,data,callback);  方法从服务器加载数据，并把返回的数据放入被选元素中。\n                （URL）\n                        $(\"#div1\").load(\"demo_test.txt #p1\"); 指定文件中id为p1的元素\n                （callback 三个形参）\n                        responseTxt - 包含调用成功时的结果内容\n                        statusTXT - 包含调用的状态\n                        xhr - 包含 XMLHttpRequest 对象\n                        例子：if(statusTxt==\"success\")\n                                        alert(\"外部内容加载成功!\");\n                                      if(statusTxt==\"error\")\n                                        alert(\"Error: \"+xhr.status+\": \"+xhr.statusText);\n                在jQuery的load()方法中，无论AJAX请求是否成功，一旦请求完成（complete）后，回调函数（callback）立即被触发。\n                \n                $.get(URL,callback); 方法通过 HTTP GET 请求从服务器上请求数据\n                        例子:$.get(\"/statics/demosource/demo_test.php\",function(data,status){\n                                        alert(\"数据: \" + data + \"\\n状态: \" + status);\n                                });\n                \n                $.post(URL,data,callback);  方法通过 HTTP POST 请求从服务器上请求数据。\n                        例子：.post(\"/statics/demosource/demo_test_post.php\",\n                                    {\n                                            name:\"W3Cschool\",\n                                              url:\"http://www.w3cschool.cn\"\n                                    },\n                                    function(data,status){\n                                      alert(\"数据: \" + data + \"状态: \" + status);\n                                    });\n                【使用多种框架为了避免冲突】\n                方法一：（可以直接使用jQuery代替$）\n                方法二：noConflict() 方法会释放对 $ 标识符的控制（存入新的变量名）\n                        例子： \n                        var jq=$.noConflict();\n                        jq(document).ready(function(){\n                                      jq(\"button\").click(function(){\n                                              jq(\"p\").text(\"jQuery 仍然在工作!\");\n                                      });\n                        });\n                方法三：还想使用$ ，通过例子可以在函数内使用 $ 符号了 - 而在函数外，依旧不得不使用 \"jQuery\"\n                        例子：\n                                $.noConflict();\n                                jQuery(document).ready(function($){\n                                         $(\"button\").click(function(){\n                                                    $(\"p\").text(\"jQuery 仍然在工作!\");\n                                          });\n                                });\n                \n                \n                \n                <script type=\"text/javascript\">\n                  if(/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {\n                    window.location.href = \"m-Details.html\";\n                  }\n                </script>\n                \n                \n                jquery获取自定义属性的值\n                //获取属性值 1\n                \n                <div id=\"text\" value=\"黑哒哒的盟友\"><div>\n                \n                jQuery取值： $(\"#text\").attr(\"value\");\n                \n                 \n                \n                //获取自定义属性值 2\n                \n                <div id=\"text\" value=\"123\" data_obj=\"黑哒哒的盟友\"><div>\n                \n                JQUERY取值：$(\"#text\").attr(\"data_obj\");\n                \n                 \n                \n                //获取data值 3\n                \n                <div id=\"text\" value=\"123\" data-name=\"黑哒哒的盟友\"><div>\n                \n                JQUERY取值：$(\"#text\").data(\"name\");\n                \n                \n                \n                if判断class: if ($(this).is(\".addBtn\")) {}\n                \n                \n                ajax:\n                post请求\t$.post(url,data,success(data, textStatus, jqXHR),dataType)\n                \n                \n                bind() 方法为被选元素添加一个或多个事件处理程序，并规定事件发生时运行的函数。\n                $(selector).bind(event,data,function)\n                $(\"button\").bind({\n                    click:function(){$(\"p\").slideToggle();\n                },\n                    mouseover:function(){$(\"body\").css(\"background-color\",\"red\");},  \n                    mouseout:function(){$(\"body\").css(\"background-color\",\"#FFFFFF\");}  \n                  });\n                \n                each 遍历\n                jQuery.each(function(index,item){}),index:元素下标，item每个元素\n                返回 false 可用于及早停止循环。\n                jQuery还提供了一个具有相同名称的辅助函数，可以在不事先选择或创建DOM元素的情况下调用\n                $.each(object,[callback]);\n                参数\n                \n                object :需要遍历的对象或数组。\n                \n                callback：每个成员/元素执行的回调函数，可选参数。格式为function(i,item){}，i和item是可选参数，其中i为对象的属性或数组的索引，item为对应属性或索引的值。如果需要退出each循环可使回调函数返回 false，其它返回值将被忽略。\n                \n                eq遍历\n                eq() 方法将匹配元素集缩减值指定 index 上的一个。\n                .eq(index)\n                \n                scroll() 方法触发 scroll 事件\n                $(selector).scroll(function)\n                        \n</div></div></div></div></div></div></div></p></h2></h1></div></html></tr></button></a></li></ul></li></ul></p></pre>","categories":[],"tags":[{"name":"笔记|点击更多","path":"api/tags/笔记|点击更多.json"}]}