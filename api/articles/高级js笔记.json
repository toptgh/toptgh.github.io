{"title":"JS高级笔记","slug":"高级js笔记","date":"2017-01-03T07:58:00.000Z","updated":"2018-12-02T15:33:56.277Z","comments":true,"excerpt":"","content":"<pre>\n        // 工厂模式\n        // 特点: 批量化生产对象, 每次都会返回一个新的对象, 当对象属性修改时, 不会对其他产生影响\n        // 缺点: 不知道哪一个工厂创建出来的\nfunction fn(name,age){\n            var obj=new Object();\n            obj.name=name;\n            obj.age=age;\n            return obj;\n        }\n        //点添加属性\n       var fnn=fn('xl',20);\n       fnn.age=30;\n       console.log(fnn);//name:'xl',age:30\n       //变量方式添加属性\n       var name='xx';\n       var oop='name';\n       console.log(fn([oop]=name));//name:'xx',age:undefined\n       console.log(fnn instanceof fn);//false 工程模式找不到谁创建的 当fnn instanceof Object为true\n\n//构造函数的首写字母用大写\n// 构造函数本身就是一个函数, 当调用时,使用new关键字调用,才称为一个构造函数\n// 添加new关键字以后, 函数内部的this指向实例化对象(变量);\n// 当使用new关键字, 函数如果没有return返回值, 会默认返回一个对象, 对象的属性是函数内的this后面的变量\n// 缺点: 如果属性为方法, 也就是函数, 函数是引用数据类型, 每一次声明 都需要占用内存, 而每一个函数完成的功能都一样, 不需要每一次声明\nvar color = 'red';\n        function Cat(name, color) {\n                this.name = name;\n                this.color = color;\n            // return {\n            //     name: name,\n            //     color: color\n            // }\n        }\n        var cat = Cat('lemon', 'gray');\n        console.log(cat);   //没有return 返回undefined，有return返回{name: \"lemon\", color: \"gray\"}\n        console.log(window.color);  //gray  this指向全局 全局被改成gray\n        var _cat = new Cat('lemon', 'gray');   \n        console.log(_cat);  //没有return 返回一个对象Cat {name: \"lemon\", color: \"gray\"}，有return返回{name: \"lemon\", color: \"gray\"}\n        console.log(_cat instanceof Cat);   //为true\n\n // 原型模式\n        // 共有方法或者属性放到原型上\n\tfunction Person(name, age){\n13                 //属性：每个对象的属性各不相同\n14                 this.name = name;\n15                 this.age = age;\n16             }\n17             //在原型上添加方法，这样创建的所有对象都是用的同一套方法\n18             Person.prototype.showName = function(){\n19                 alert(\"姓名：\"+this.name);\n20             }\n21             Person.prototype.showAge = function(){\n22                 alert(\"年龄：\"+this.age);\n23             }\n24             \n25             //创建两个对象\n26             var p1 = new Person(\"jiangzhou\", 22);\n27             var p2 = new Person(\"Lyli\", 20);\n28             \n29             alert(p1.showName == p2.showName); //true\n30             //这里为什么两个对象的方法是相等的呢，可以看成如下\n31             alert(p1.showName == Person.prototype.showName); //true\n\n // 面向对象：是一种高级的编程思想,把具体的事物按照某种共同的特点进行抽象化;具有封装/继承/(多态, js中没有多态).\n           js 可以通过间接的方式实现多态, 根据函数中的arguments, 判断参数个数,和参数类型.来实现不同的方法\n// ooa: 面向对象分析: 分析项目有哪些功能,如何实现(了解项目)\n        // ood: 面向对象设计: 代码进行划分(模块化), 方便拓展和维护, 模块之间如何进行联系\n        // oop: 面向对象开发\n// 优点: 好拓展, 容易维护.\n // 原型链\n// 函数天生自带一个prototype属性\n        // prototype对象默认自带一个constructor属性;\n        // constructor指向构造函数本身\n // 对象天生自带一个__proto__属性\n        // 每一个实例化对象的__proto__都指向构造函数的原型(prototype);\n        // 通过下面验证,实例化对象的__proto__ 指向构造函数的prototype;\n \tconsole.log(People.prototype === people.__proto__);\n// 原型链:当一个对象使用一个方法或者属性时,先从对象本身进行查找,如果找到直接使用,\n        // 如果找不到, 从当前对象的__proto__进行寻找,直到找到对象中更没有__proto__,停止查找\n\n\n // 什么是服务器\n            // 硬件: 就是超级计算机,计算机能力要比普通的计算机强(普通的计算机也可以做服务器);\n            // 软件: 安装在硬件上面的服务软件, 比如Apache, IIS 等\n            // 通常人们说服务器时, 就是指的软件\n        // 什么是webserver\n            // 服务器统称\n        // 什么是静态页面\n            // 不是说页面中没有动画或者很绚丽的效果就是静态页面\n            // 取决于页面中没有使用数据库的数据,就称之为静态页面\n            // 优点: 加载速度比动态网站更快,\n            //       内容相对稳定\n            //       有利于搜索引擎优化(不一定)\n\n        // 什么是动态页面\n            // 页面中使用数据库的数据\n            // 优点： \n            //      方便维护\n            //      节省开发成本，当需要修改html里面的内容时, 只需要通过管理系统修改数据即可;\n        // 什么是前后端分离\n            // 开发模式\n            // 前端跟后台同时开发, 节省开发时间, 节省开发成本;\n            // 降低了对开发者的要求,专一做自己的事情.\n            // 前端专心做页面,后台获取数据,对数据进行优化\n\n\n        // 输入一个网址，浏览器会经过一个什么样的过程\n\n        // 查找本地,是否缓存了当前要请求的文件且时间未过期,如果都满足直接使用,如果不满足, 执行下一步 \n\n        //  输入网址进行域名解析(DNS解析),返回服务器的ip地址\n\n        // 通过IP地址找到对应的服务器\n\n        // 通过端口号，和对应的地址找到对应的文件\n\n        // 服务器找到后，返回给客户端\n\n        // 浏览器加载解析静态资源文件\n\n        // 加载过程?\n\n        // js, img ,video ,css 静态资源文件;\n        // 客户端不可能在服务端打开静态资源, 把静态资源下载到本地,在打开\n\n\n用户访问网页都发生了什么。\n\n用户访问网页，DNS服务器（域名解析系统）会根据用户提供的域名查找对应的IP地址，找到后，系统会向对应IP地址的网络服务器发送一个http请求。\n网络服务器解析请求，并发送请求给数据库服务器。\n数据库服务器将请求的资源返回给网络服务器，网络服务器解析数据，并生成html文件，放入http response中，返回给浏览器。\n浏览器解析 http response。\n浏览器解析 http response后，需要下载html文件，以及html文件内包含的外部引用文件，及文件内涉及的图片或者多媒体文件。（这里进入主题了也就是下面的第三大点）\n\n<?php\n        // 也是一种弱类型语言, 服务器扩展脚本, 在服务器上面解析, 也是面向对象的语言\n        // 这个页面是服务端渲染的\n        // 原因: 客户端请求php文件,服务器查找对应的php文件,找到以后交给php解析器进行解析,解析玩以后返回给客户端\n        // 每一行结束, 要手动添加分号\n // 打印字符串\n        echo \"<h1>Hello World\";\n  // 打印数据和数据类型\n        // var_dump($num);\n // 关联数组\n        $arr2 = array(\"name\" => \"xiaolan\", \"age\" => 18, \"height\" => \"183cm\");\n//for 循环\n for($i = 0; $i < count($arr); $i++) {\n            var_dump($arr[$i]);\n        }\n // foreach($数组 as $属性 => $属性值)\n        foreach($arr2 as $key => $value) {\n            var_dump($value);\n        }\n\n        // 通过js的方式向服务器发送请求\n        // ajax 支持异步\n        // ajax 可以异步的原因?\n        // 他把事件处理通过请求,发送个给了服务器,服务器处理,js还可以继续做别的事情\n var xhr = new XMLHttpRequest();\n // 请求方式， 请求地址， 是否异步\n        xhr.open('GET', 'login.php', true);\nxhr.send();\n// 接收反馈结果\n            /* \n                readystate\n                0: 没有建立连接\n                1： 建立连接 （send）\n                2： 接受信息\n                3： 处理信息\n                4： 返回处理结果\n            */\n            // 状态码: 用来告知这次请求是否成功\n get: \n                会把参数和url进行拼接\n                安全性很低\n                传输数据量少,一般为4kb\n                默认获取数据时使用\n                缓存问题\n                // 缓存： get请求，会把数据保存到本地，当客户端再次使用时,如果发现本地已经存在,且没有过期,直接使用\n                // 优点:  减少http请求, 提升页面加载速度\n                // 缺点:  在未过期时,改变了数据,页面就不能实时获取最新的数据\n\n        */\n        /* post:\n                会把参数放进请求主体里\n                相对于get较安全一点\n                理论上传输数据没有大小限制\n                默认设置数据时使用\n\n // 2xx\n            // 200 : 请求成功\n        // 3xx\n            // 301: 永久性重定向\n            // 302: 暂时性重定向\n            // 304: 文件未修改,使用缓存文件\n        // 4xx\n            // 默认都是客户端的问题\n            // 403: 没有权限访问\n            // 404: 请求的资源地址不存在\n        // 5xx \n            // 服务端的问题\n            // 500: 服务器在执行时,出现了问题\n\n\n单进程：一个时间段只能执行一个进程，例如，要听歌就写不了文档\n\n多进程：一个时间段能同时执行多个进程，例如，终于能同时听歌写文档了\n\n多线程：让一个进程能同时执行一段代码的技术，用起来感觉类似于多进程，但区别在于线程与线程间共享资源，所以比多进程节省了系统资源，例如，一个浏览器可以同时打开两个网页。\n\n并发：一个“时间段”有多个程序同时执行，多线程并发和多进程并发应该都算并发，你可以说多进程和多线程是一种技术，并发是一种状态。\n\n并行：可以说是微观上的并发或者真正的并发，就是某一个“时刻”有多个程序同时执行，也是一种状态。\n\n同步：一个函数调用在没结束前原来的函数啥都不能做，是一种目的。\n\n异步：一个函数调用后，原来的函数继续干自己的事情，等那个函数干完后，借助某种手段通知原来的函数执行结果。也是一种目的，一般是通过多线程技术去实现，例：js在遇到ajax时异步调用这个方法，浏览器新建一个线程去处理ajax的事情，js继续干自己的事情，等ajax拿到数据后浏览器将它丢到一个等待队列里面，js干完自己那些不宜中断的事情后就去查询那个队列里面有结果了没，有就拿出来。\n\n\n// 同源策略\n            // 浏览器对数据的保护机制, 浏览器为了防止其他盗取数据,做出的相对应的保护机制\n\n            // 相同传输协议,相同的域名, 相同的端口号, 我们称之为同源\n\n        // 当我们向服务器请求数据时,发送接口即可.\n\n        // 客户端向后端发送请求, 服务端会把数据返回, \n        //  浏览器会检测客户端和服务端是否出于同源,如果同源返回的数据客户端可以直接使用\n        //  如果不是同源: 检测响应头部是否含有Access-Control-Allow-Origin, 允许当前域名使用,如果有,可以使用,如果没有就不可以使用.\n\n        // 使用跨域的场景\n        //  前后端分离模式, 前端向后台请求数据, 前端是一个服务器,后端是一个服务器,这个时候就会造成跨域问题\n\n        // 解决跨域\n        // cors 跨域  后台给权限, 前端可以使用(只需要后端参与)\n        // 在后台添加允许域名通过 Access-Control-Allow-Origin: *\n\n        // jsonp 形式:  利用script 标签请求资源,没有跨域限制 (前后端都需要参与)\n        // 只试用get请求, 原因: script请求文件,只能是get\n        // 代理 (服务器发送请求,是没有跨域)\n        \n\n\n/*\n            事务: 一件完整的事情\n            HTTP事务: 客户端向服务端发送请求(发送数据), 服务端向客户端返回数据(一个完整的http请求);\n            \n            报文:\n                起始行 请求起始行 响应起始行\n                首部:   通用首部  请求首部  响应首部 (自定义)\n                主体:   请求主体  响应主体  (自定义)\n            General  通用首部\n            Request URL: http://localhost:8888/1808/24day/24day-up/a.php  请求地址\n            Request Method: POST //请求方式\n            Status Code: 200 Ok // 状态码\n\n            Request Header 请求头\n            // 文本格式, 有json,html, 表单, 图片\n            Content-Type: text/plain;charset=UTF-8\n            Host: localhost:8888\n            Origin: http://localhost:8888\n            Referer: http://localhost:8888/1808/24day/24day-up/ajax.html\n            User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36\n            // 头部的信息可以自定义, 通过xhr.setRequestHeader()方法,默认使用默认配置, 一般后端有要求,会提出\n\n            响应头部, 服务器和解析器的基本信息\n            Content-Type: text/html\n            Date: Tue, 25 Sep 2018 06:54:58 GMT(格林尼治事件, 跟中国事件相差8小时)\n            Keep-Alive: timeout=5, max=99\n            Server: Apache/2.4.4 (Win64) PHP/5.4.12\n\n            响应主体:  服务器返回数据\n        */\n\n        var xhr = new XMLHttpRequest();\n        // 设置请求头   \n        xhr.setRequestHeader('Content-type', 'application/json');\n\n\n// 会话: 一个网页就是一个会话, 关闭网页,会话结束\n        //  遵循同源策略\n        // 页面传值\n\n        // cookie\n\n            // 会话跟踪技术\n\n            // http请求,是无状态的请求,不会记录发送者的信息. 浏览器网站时,有些接口是需要携带用户信息的,会把用户信息存放到cookie中,\n            // 这样后台就可以通过cookie的值,获取发送请求的额用户信息, 每一次发请求,后台都可以知道是谁发送的\n\n            // 大小限制: 2k-10k\n\n            // 需要设置过期时间\n            // 如果不设置, 默认会话关闭,就过期.\n\n        // localStorage\n            // 本地存储\n            // 没有过期时间, 除非人为清除\n            // 只要同源,在同一个浏览器,无论打开新的tab页,还是浏览器都可以访问\n        // sessionStorage \n            // 会话存储\n            // 也没有过期时间, 人为清除,或者会话关闭\n            // 当前会话可以共享, 其他会话不可以使用\n\n // 函数是一个活体, 当函数执行时,形成一个私有的作用域, 执行完内部自动销毁.\n        // 函数自动销毁的条件, 没有返回值, 返回值不能是引用数据类型(函数内部的变量不能 被外部使用,一旦使用,不能被销毁)\n        // 闭包： 函数里面在嵌套一个函数, 并返回\n        // 作用:  函数执行完,不销毁. 可以吧数据进行缓存,方便在函数外部间接的使用\n\n        // 缺点: 函数不会被销毁,内存不会释放, 有可能造成内存泄漏（不可以滥用）\n\n服务端渲染:\n        优点:就是Ajax的缺点\najax请求数据:\n        优点: \n            页面无刷新请求数据,\n            减少http请求,减少用户等待时间, 增加用户体验\n            减少了服务端的压力\n            前后端分离的工作模式\n        \n        缺点: \n            历史记录无法查询\n            不利于搜索引擎优化\n            首次加载页面比服务端渲染慢\n\n  // 数据库: 存放在计算机的数据的仓库;\n        // 存储数据: 结构化存储,方便维护\n\n // 数据库分类\n\n        // 关系型数据库\n            //  表与表之间可以建立联系\n            //  把一个表的主键当成一个表的外键\n            //  主键:(唯一) 主键的值是不可以重复的\n            //  删除数据时, 如果数据的主键在其他表中当做外键被使用,这条数据就不可以删除,必须把所有有引用关系的数据全部删除才可以\n            \n            // sql server  只能运行在windows上面\n            // oracle  跨平台,  收费, 大型公司的首选\n\n            // mysql 跨平台,开源且免费 小公司的首选\n\n\n        // 非关系型数据库\n            // mangoDB \n\n // 什么是json\n        //  JSON 是一种用于数据交换的文本格式\n\n\n        // JSON字符串和js中的对象或者数组对象的区别:\n            // 属性名称必须用双引号括起来\n            // 字符串类型的值，也必须用双引号\n            // 不可以使用undefined，\n            // 也不可以出现 函数\n            // 结尾不能多逗号\n        \n        //  js中数组和对象的字面量声明方式，借鉴了json的格式\n\n        // json 如何在js中转换\n// 从json文件获取字符串\n                $json = file_get_contents(\"json/person.json\");\n//  PHP使用 json_decode( )   ---- json 转 对象/数组\n                $json = json_decode($json);\n//json_encode( )    ---- 对象/数组 转 json \n\nJSON.stringify() 从一个对象中解析出字符串\nJSON.stringify({\"a\":\"1\",\"b\":\"2\"})\n结果是：\"{\"a\":\"1\",\"b\":\"2\"}\"\n        // 第一个参数: 想转为json字符串的对象\n        // 选填\n        // 第二个参数: 可以是数组,也可以是函数, 数组里面的内容,是json字符串要展示的属性\n        // 第三个参数: 首行缩进(格式化字符串)\n        // var str = JSON.stringify(arr, ['name', 'age'], 2);\n如果数组的成员是undefined、函数或 XML 对象，则这些值被转成null。\nvar arr = [undefined, function () {}];\nJSON.stringify(arr) // \"[null,null]\"\n\n如果原始对象中，有一个成员的值是undefined、函数或 XML 对象，这个成员会被过滤掉\n复制代码\nvar obj = {\n  a: undefined,\n  b: function () {}\n};\nJSON.stringify(obj) // \"{}\"\n\nJSON.stringify([1, \"false\", false])\n// '[1,\"false\",false]'\n\nJSON.stringify({ name: \"张三\" })\n// '{\"name\":\"张三\"}'\n\n正则对象会被转成空对象。\nJSON.stringify(/foo/) // \"{}\"\n\n\nJSON.parse()从一个字符串中解析出JSON对象\nJSON.parse({\"a\":\"1\",\"b\":\"2\"});\n结果是：Object{a:\"1\",b:\"2\"}\nJSON.parse('{}') // {}\nJSON.parse('true') // true\nJSON.parse('\"foo\"') // \"foo\"\nJSON.parse('[1, 5, \"false\"]') // [1, 5, \"false\"]\nJSON.parse('null') // null\nvar o = JSON.parse('{\"name\": \"张三\"}');\no.name // 张三 \n\n  // 浅拷贝\n            // 把一个引用数据类型的值得地址给另外一个变量, 如果其中一个改变,另外一个也会改变\n\n        // 深拷贝\n            // 把一个引用数据类型的值赋值给另外一个变量,两者没有关系\n\n解决乱码\nheader(\"Content-type: text/html; charset=UTF-8\");\n    // 数据库地址,用户名,密码,数据源,端口号\n    // php使用数据库\n    // 1. 连接数据库\n    // 2. 设置字符集 utf-8\n    // 3. 执行sql语句\n    // 4. 得到返回结果\n    // 5. 关闭数据库\n $coon = new mysqli(\"localhost\", \"root\", \"\", \"shop_1808\", \"3306\");\n// php对象使用方法或者属性时 用 ->\n// 插入,删除,修改 执行返回的结果是一个布尔类型的值, 成功返回true, 失败返回false\n // 查询\n// $result = $coon->query($sql);\n// $rows = $result -> fetch_array();\n    // 以下方法找不到结果返回null\n    // fetch_all() : 返回所有数据,但是数据格式是索引数组\n    // fetch_assoc(): 返回一条数据,格式为关联数组 \n    // fetch_object(): 返回一条数据,格式为对象\n    // fetch_array(): 返回关联数组和索引数组的结合版\n\n-- 增加\n-- insert  into user(username,password,mark) VALUES ('xixi_001', '123456', '1');\n-- \n\n-- 删除\n-- delete from user where mark=1 add id=2; \n-- delete from user where mark=1 or id=2;\n\n-- 修改\n-- update user set username='123' where id=2;\n\n-- 查询\n-- SELECT * FROM USER ORDER BY id ASC; --正序\n-- SELECT * FROM USER ORDER BY id DESC; --倒序\n-- SELECT * FROM USER; --整个表\n-- SELECT username, PASSWORD FROM user;\n-- SELECT username as '用户名称' FROM user WHERE id<3; <=\"\" pre=\"\">\n</3;></pre>","categories":[],"tags":[{"name":"笔记|点击更多","path":"api/tags/笔记|点击更多.json"}]}